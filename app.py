import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import gspread
from google.oauth2.service_account import Credentials
import openai
import json
import time
from typing import Dict, List, Tuple
import re
import ast
import hashlib

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema de An√°lisis de Iniciativas - Alico",
    page_icon="üí°",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilos CSS personalizados
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-align: center;
        padding: 2rem 0;
    }
    .metric-card {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
        margin: 0.5rem;
    }
    .initiative-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 1rem;
        border-left: 4px solid #667eea;
    }
    .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.875rem;
        font-weight: bold;
    }
    .high-impact {
        background-color: #10b981;
        color: white;
    }
    .medium-impact {
        background-color: #f59e0b;
        color: white;
    }
    .low-impact {
        background-color: #ef4444;
        color: white;
    }
</style>
""", unsafe_allow_html=True)

# Inicializar estado de la sesi√≥n
if 'data' not in st.session_state:
    st.session_state.data = None
if 'analyzed_data' not in st.session_state:
    st.session_state.analyzed_data = None
if 'last_update' not in st.session_state:
    st.session_state.last_update = None

# Funci√≥n para conectar con Google Sheets
@st.cache_resource
def connect_to_google_sheets():
    """Conecta con Google Sheets usando las credenciales de servicio"""
    try:
        credentials = Credentials.from_service_account_info(
            st.secrets["gcp_service_account"],
            scopes=[
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive"
            ]
        )
        client = gspread.authorize(credentials)
        return client
    except Exception as e:
        st.error(f"Error al conectar con Google Sheets: {str(e)}")
        return None

# Funci√≥n para cargar datos desde Google Sheets
def load_data_from_sheets(sheet_url):
    """Carga los datos desde Google Sheets"""
    try:
        client = connect_to_google_sheets()
        if client is None:
            return None
        
        sheet = client.open_by_url(sheet_url)
        worksheet = sheet.get_worksheet(0)  # Primera hoja
        data = worksheet.get_all_records()
        
        if data:
            df = pd.DataFrame(data)
            # Renombrar columnas para facilitar el trabajo
            column_mapping = {
                'Marca temporal': 'timestamp',
                'Nombre de la iniciativa': 'nombre_iniciativa',
                'Cu√©ntanos brevemente, ¬øde qu√© trata tu iniciativa / idea innovadora?': 'descripcion',
                'Nombre de qui√©n propone': 'proponente',
                'N√∫mero de celular al que te podamos contactar ': 'telefono',
                'Correo al que te podamos contactar ': 'correo',
                'Selecciona a qu√© p√∫blico de inter√©s perteneces ': 'publico_interes',
                'Selecciona el √°rea o proceso al cual perteneces ': 'area_proceso',
                '¬øCu√°l el nombre de tu organizaci√≥n?': 'organizacion'
            }
            df.rename(columns=column_mapping, inplace=True)
            
            # Limpiar filas vac√≠as o incompletas
            df = df.dropna(how='all')  # Eliminar filas completamente vac√≠as
            df = df[df['nombre_iniciativa'].str.strip() != '']  # Eliminar filas con nombre vac√≠o
            
            # Convertir timestamp a datetime
            df['timestamp'] = pd.to_datetime(df['timestamp'], dayfirst=True, errors='coerce')
            
            # Generar un identificador √∫nico basado en nombre_iniciativa, timestamp y descripci√≥n
            df['initiative_id'] = df.apply(
                lambda row: hashlib.md5(f"{row['nombre_iniciativa']}_{row['timestamp']}_{row['descripcion']}".encode()).hexdigest(),
                axis=1
            )
            
            return df
        return None
    except Exception as e:
        st.error(f"Error al cargar datos: {str(e)}")
        return None

# Funci√≥n para cargar datos analizados desde Google Sheets
def load_analyzed_data(sheet_url):
    """Carga los datos analizados desde una hoja espec√≠fica en Google Sheets"""
    try:
        client = connect_to_google_sheets()
        if client is None:
            return None
        
        sheet = client.open_by_url(sheet_url)
        try:
            worksheet = sheet.worksheet("Analyzed Initiatives")
        except gspread.exceptions.WorksheetNotFound:
            # Crear la hoja si no existe
            worksheet = sheet.add_worksheet(title="Analyzed Initiatives", rows=1000, cols=20)
            # Definir encabezados
            headers = [
                'initiative_id', 'timestamp', 'nombre_iniciativa', 'descripcion', 'proponente',
                'telefono', 'correo', 'publico_interes', 'area_proceso', 'organizacion',
                'areas_innovacion', 'impacto_sostenibilidad', 'impacto_viabilidad',
                'impacto_diferenciacion', 'puntuacion_global', 'justificacion', 'impacto',
                'esfuerzo', 'viabilidad_tecnica', 'alineacion_estrategica', 'tiempo_implementacion',
                'categoria', 'beneficios', 'riesgos', 'recomendaciones', 'cuadrante'
            ]
            worksheet.update('A1', [headers])
        
        data = worksheet.get_all_records()
        if data:
            df = pd.DataFrame(data)
            # Convertir listas almacenadas como strings a listas reales
            for col in ['areas_innovacion', 'beneficios', 'riesgos', 'recomendaciones']:
                df[col] = df[col].apply(lambda x: ast.literal_eval(x) if isinstance(x, str) and x else [])
            # Convertir timestamp a datetime
            df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce')
            return df
        return None
    except Exception as e:
        st.error(f"Error al cargar datos analizados: {str(e)}")
        return None

# Funci√≥n para guardar datos analizados en Google Sheets
def save_analyzed_data(sheet_url, analyzed_data):
    """Guarda los datos analizados en la hoja 'Analyzed Initiatives'"""
    try:
        client = connect_to_google_sheets()
        if client is None:
            return
        
        sheet = client.open_by_url(sheet_url)
        try:
            worksheet = sheet.worksheet("Analyzed Initiatives")
        except gspread.exceptions.WorksheetNotFound:
            worksheet = sheet.add_worksheet(title="Analyzed Initiatives", rows=1000, cols=20)
            headers = [
                'initiative_id', 'timestamp', 'nombre_iniciativa', 'descripcion', 'proponente',
                'telefono', 'correo', 'publico_interes', 'area_proceso', 'organizacion',
                'areas_innovacion', 'impacto_sostenibilidad', 'impacto_viabilidad',
                'impacto_diferenciacion', 'puntuacion_global', 'justificacion', 'impacto',
                'esfuerzo', 'viabilidad_tecnica', 'alineacion_estrategica', 'tiempo_implementacion',
                'categoria', 'beneficios', 'riesgos', 'recomendaciones', 'cuadrante'
            ]
            worksheet.update('A1', [headers])
        
        # Convertir DataFrame a lista de listas para guardar
        data_to_save = analyzed_data.copy()
        for col in ['areas_innovacion', 'beneficios', 'riesgos', 'recomendaciones']:
            data_to_save[col] = data_to_save[col].apply(json.dumps)
        data_to_save['timestamp'] = data_to_save['timestamp'].astype(str)
        
        # Obtener datos existentes
        existing_data = worksheet.get_all_records()
        existing_ids = set([row['initiative_id'] for row in existing_data]) if existing_data else set()
        
        # Filtrar solo los registros nuevos
        new_data = data_to_save[~data_to_save['initiative_id'].isin(existing_ids)]
        
        if not new_data.empty:
            # Convertir a lista de listas
            values = new_data.values.tolist()
            # Agregar al final de la hoja
            worksheet.append_rows(values, value_input_option='RAW')
            st.success(f"‚úÖ Guardados {len(new_data)} nuevos an√°lisis en Google Sheets")
    except Exception as e:
        st.error(f"Error al guardar datos analizados: {str(e)}")

# Funci√≥n para analizar iniciativas con OpenAI
def analyze_initiative_with_ai(text):
    openai.api_key = st.secrets["OPENAI_API_KEY"]
    prompt = (
        f"Analiza la siguiente iniciativa:\n\n"
        f"{text}\n\n"
        "Devuelve el an√°lisis como un JSON v√°lido con esta estructura exacta, sin incluir markdown ni texto adicional fuera del JSON:\n"
        "{\n"
        "  \"areas_innovacion\": [\"producto\", \"proceso\"],\n"
        "  \"impacto_sostenibilidad\": 70,\n"
        "  \"impacto_viabilidad\": 80,\n"
        "  \"impacto_diferenciacion\": 75,\n"
        "  \"puntuacion_global\": 78,\n"
        "  \"justificacion\": \"Texto corto explicando la puntuaci√≥n\",\n"
        "  \"impacto\": 8,\n"
        "  \"esfuerzo\": 4,\n"
        "  \"viabilidad_tecnica\": 8,\n"
        "  \"alineacion_estrategica\": 7,\n"
        "  \"tiempo_implementacion\": 6,\n"
        "  \"categoria\": \"Tecnolog√≠a\",\n"
        "  \"beneficios\": [\"Beneficio 1\", \"Beneficio 2\"],\n"
        "  \"riesgos\": [\"Riesgo 1\", \"Riesgo 2\"],\n"
        "  \"recomendaciones\": [\"Recomendaci√≥n 1\", \"Recomendaci√≥n 2\"]\n"
        "}"
    )

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "Eres un experto en innovaci√≥n empresarial. Responde √∫nicamente con un JSON v√°lido, sin markdown ni texto adicional."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.5,
            max_tokens=700
        )
        content = response.choices[0].message.content.strip()
        
        # Remove markdown code fences and any leading/trailing whitespace
        content = re.sub(r'^```json\n|```$|\n\s*\n', '', content, flags=re.MULTILINE).strip()
        
        # Attempt to parse JSON
        try:
            analysis = json.loads(content)
        except json.JSONDecodeError as parse_err:
            st.error(f"Error al parsear JSON: {parse_err}")
            st.write(f"Contenido recibido: {content}")
            return {
                "areas_innovacion": [],
                "impacto_sostenibilidad": 0,
                "impacto_viabilidad": 0,
                "impacto_diferenciacion": 0,
                "puntuacion_global": 0,
                "justificacion": "Error en el an√°lisis: respuesta no v√°lida",
                "impacto": 0,
                "esfuerzo": 0,
                "viabilidad_tecnica": 0,
                "alineacion_estrategica": 0,
                "tiempo_implementacion": 0,
                "categoria": "Sin categor√≠a",
                "beneficios": [],
                "riesgos": [],
                "recomendaciones": []
            }
        
        # Validate that the response contains all required keys
        required_keys = [
            "areas_innovacion", "impacto_sostenibilidad", "impacto_viabilidad",
            "impacto_diferenciacion", "puntuacion_global", "justificacion",
            "impacto", "esfuerzo", "viabilidad_tecnica", "alineacion_estrategica",
            "tiempo_implementacion", "categoria", "beneficios", "riesgos", "recomendaciones"
        ]
        if not all(key in analysis for key in required_keys):
            missing_keys = [key for key in required_keys if key not in analysis]
            st.error(f"Error: Faltan claves en la respuesta JSON: {missing_keys}")
            return {
                "areas_innovacion": [],
                "impacto_sostenibilidad": 0,
                "impacto_viabilidad": 0,
                "impacto_diferenciacion": 0,
                "puntuacion_global": 0,
                "justificacion": "Error en el an√°lisis: estructura JSON incompleta",
                "impacto": 0,
                "esfuerzo": 0,
                "viabilidad_tecnica": 0,
                "alineacion_estrategica": 0,
                "tiempo_implementacion": 0,
                "categoria": "Sin categor√≠a",
                "beneficios": [],
                "riesgos": [],
                "recomendaciones": []
            }
        
        return analysis
    except Exception as e:
        st.error(f"Error en an√°lisis AI: {str(e)}")
        return {
            "areas_innovacion": [],
            "impacto_sostenibilidad": 0,
            "impacto_viabilidad": 0,
            "impacto_diferenciacion": 0,
            "puntuacion_global": 0,
            "justificacion": f"Error en el an√°lisis: {str(e)}",
            "impacto": 0,
            "esfuerzo": 0,
            "viabilidad_tecnica": 0,
            "alineacion_estrategica": 0,
            "tiempo_implementacion": 0,
            "categoria": "Sin categor√≠a",
            "beneficios": [],
            "riesgos": [],
            "recomendaciones": []
        }

# Funci√≥n para procesar todas las iniciativas
def process_initiatives(data, sheet_url):
    resultados = []
    total = len(data)
    
    # Cargar datos analizados previamente
    analyzed_data = load_analyzed_data(sheet_url)
    existing_ids = set(analyzed_data['initiative_id']) if analyzed_data is not None else set()
    
    for i, row in data.iterrows():
        initiative_id = row['initiative_id']
        
        # Verificar si la iniciativa ya fue analizada
        if initiative_id in existing_ids:
            st.write(f"Iniciativa '{row['nombre_iniciativa']}' ya analizada, recuperando datos...")
            existing_row = analyzed_data[analyzed_data['initiative_id'] == initiative_id].iloc[0]
            result = existing_row.to_dict()
            resultados.append(result)
        else:
            with st.spinner(f"Analizando iniciativa {i + 1} de {total}..."):
                analysis = analyze_initiative_with_ai(row["descripcion"])
                
                if isinstance(analysis, dict):
                    result = {
                        "initiative_id": initiative_id,
                        "timestamp": row["timestamp"],
                        "nombre_iniciativa": row["nombre_iniciativa"],
                        "descripcion": row["descripcion"],
                        "proponente": row["proponente"],
                        "telefono": row["telefono"],
                        "correo": row["correo"],
                        "publico_interes": row["publico_interes"],
                        "area_proceso": row["area_proceso"],
                        "organizacion": row["organizacion"],
                        **analysis,
                        "cuadrante": categorizar_cuadrante(analysis.get("impacto", 0), analysis.get("esfuerzo", 0))
                    }
                    resultados.append(result)
    
    # Convertir resultados a DataFrame
    result_df = pd.DataFrame(resultados)
    
    # Guardar nuevos an√°lisis en Google Sheets
    if not result_df.empty:
        save_analyzed_data(sheet_url, result_df)
    
    return result_df

def categorizar_cuadrante(impacto: float, esfuerzo: float) -> str:
    """Categoriza la iniciativa en un cuadrante de la matriz esfuerzo-impacto"""
    if impacto >= 7 and esfuerzo <= 4:
        return "Quick Wins"
    elif impacto >= 7 and esfuerzo > 4:
        return "Proyectos Estrat√©gicos"
    elif impacto < 7 and esfuerzo <= 4:
        return "Fill Ins"
    else:
        return "Dif√≠ciles de Justificar"

# Funci√≥n principal de la aplicaci√≥n
def main():
    # Header
    st.markdown('<h1 class="main-header">üí° Sistema de An√°lisis de Iniciativas de Innovaci√≥n</h1>', unsafe_allow_html=True)
    st.markdown('<p style="text-align: center; font-size: 1.2rem; color: #6b7280;">Alico SAS BIC - √Årea de Innovaci√≥n</p>', unsafe_allow_html=True)
    
    # Sidebar para configuraci√≥n
    with st.sidebar:
        st.header("‚öôÔ∏è Configuraci√≥n")
        
        # URL de Google Sheets
        sheet_url = st.text_input(
            "URL de Google Sheets",
            value="https://docs.google.com/spreadsheets/d/1G57SXlODM0XKtSIozprz9dqPJEqPTpExsk0whv4sxIc/edit",
            help="Ingresa la URL del Google Sheets con las respuestas del formulario"
        )
        
        # Bot√≥n para cargar/actualizar datos
        if st.button("üîÑ Cargar/Actualizar Datos", type="primary"):
            with st.spinner("Cargando datos desde Google Sheets..."):
                df = load_data_from_sheets(sheet_url)
                if df is not None:
                    st.session_state.data = df
                    st.session_state.last_update = datetime.now()
                    st.success(f"‚úÖ Datos cargados: {len(df)} iniciativas encontradas")
                    
                    # Intentar cargar datos analizados
                    with st.spinner("Verificando datos analizados..."):
                        analyzed_data = load_analyzed_data(sheet_url)
                        if analyzed_data is not None:
                            # Filtrar iniciativas que necesitan an√°lisis
                            existing_ids = set(analyzed_data['initiative_id'])
                            new_initiatives = df[~df['initiative_id'].isin(existing_ids)]
                            if new_initiatives.empty:
                                st.session_state.analyzed_data = analyzed_data
                                st.success("‚úÖ Todas las iniciativas ya est√°n analizadas")
                            else:
                                with st.spinner(f"Analizando {len(new_initiatives)} nuevas iniciativas..."):
                                    new_analyzed_data = process_initiatives(new_initiatives, sheet_url)
                                    # Combinar datos analizados existentes con nuevos
                                    st.session_state.analyzed_data = pd.concat([analyzed_data, new_analyzed_data], ignore_index=True)
                                    st.success("‚úÖ An√°lisis completado para nuevas iniciativas")
                        else:
                            # Si no hay datos analizados, procesar todo
                            with st.spinner("Analizando todas las iniciativas..."):
                                st.session_state.analyzed_data = process_initiatives(df, sheet_url)
                                st.success("‚úÖ An√°lisis completado")
                else:
                    st.error("‚ùå No se pudieron cargar los datos")
        
        # Bot√≥n para forzar re-an√°lisis
        if st.session_state.data is not None:
            if st.button("ü§ñ Forzar Re-an√°lisis de Iniciativas", type="secondary"):
                with st.spinner("Analizando todas las iniciativas..."):
                    st.session_state.analyzed_data = process_initiatives(st.session_state.data, sheet_url)
                    st.success("‚úÖ An√°lisis completado")
        
        # Mostrar √∫ltima actualizaci√≥n
        if st.session_state.last_update:
            st.info(f"üìÖ √öltima actualizaci√≥n: {st.session_state.last_update.strftime('%Y-%m-%d %H:%M')}")
        
        st.divider()
        
        # Filtros
        st.header("üîç Filtros")
        
        if st.session_state.analyzed_data is not None:
            df = st.session_state.analyzed_data
            
            # Filtro por categor√≠a
            categorias = ['Todas'] + sorted(df['categoria'].unique().tolist())
            categoria_filtro = st.selectbox("Categor√≠a", categorias)
            
            # Filtro por √°rea
            areas = ['Todas'] + sorted(df['area_proceso'].unique().tolist())
            area_filtro = st.selectbox("√Årea/Proceso", areas)
            
            # Filtro por cuadrante
            cuadrantes = ['Todos'] + sorted(df['cuadrante'].unique().tolist())
            cuadrante_filtro = st.selectbox("Cuadrante", cuadrantes)
            
            # Filtro por puntuaci√≥n
            puntuacion_min = st.slider("Puntuaci√≥n m√≠nima", 0, 100, 0)
    
    # Contenido principal
    if st.session_state.data is not None and st.session_state.analyzed_data is not None:
        df = st.session_state.analyzed_data.copy()
        
        # Aplicar filtros
        if 'categoria_filtro' in locals() and categoria_filtro != 'Todas':
            df = df[df['categoria'] == categoria_filtro]
        if 'area_filtro' in locals() and area_filtro != 'Todas':
            df = df[df['area_proceso'] == area_filtro]
        if 'cuadrante_filtro' in locals() and cuadrante_filtro != 'Todos':
            df = df[df['cuadrante'] == cuadrante_filtro]
        if 'puntuacion_min' in locals():
            df = df[df['puntuacion_global'] >= puntuacion_min]
        
        # Tabs principales
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üìä Dashboard", "üìã Iniciativas", "üìà Matriz Esfuerzo-Impacto", 
            "üìë Informes", "üîç An√°lisis Detallado"
        ])
        
        with tab1:
            # M√©tricas principales
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown('<div class="metric-card">', unsafe_allow_html=True)
                st.metric("Total Iniciativas", len(df))
                st.markdown('</div>', unsafe_allow_html=True)
            
            with col2:
                st.markdown('<div class="metric-card">', unsafe_allow_html=True)
                st.metric("Puntuaci√≥n Promedio", f"{df['puntuacion_global'].mean():.1f}")
                st.markdown('</div>', unsafe_allow_html=True)
            
            with col3:
                st.markdown('<div class="metric-card">', unsafe_allow_html=True)
                quick_wins = len(df[df['cuadrante'] == 'Quick Wins'])
                st.metric("Quick Wins", quick_wins)
                st.markdown('</div>', unsafe_allow_html=True)
            
            with col4:
                st.markdown('<div class="metric-card">', unsafe_allow_html=True)
                high_impact = len(df[df['impacto'] >= 8])
                st.metric("Alto Impacto", high_impact)
                st.markdown('</div>', unsafe_allow_html=True)
            
            st.divider()
            
            # Gr√°ficos del dashboard
            col1, col2 = st.columns(2)
            
            with col1:
                # Distribuci√≥n por categor√≠as
                fig_cat = px.pie(
                    df, 
                    names='categoria', 
                    title='Distribuci√≥n por Categor√≠as',
                    color_discrete_sequence=px.colors.qualitative.Set3
                )
                fig_cat.update_traces(textposition='inside', textinfo='percent+label')
                st.plotly_chart(fig_cat, use_container_width=True)
            
            with col2:
                # Distribuci√≥n por √°reas
                area_counts = df['area_proceso'].value_counts()
                fig_area = px.bar(
                    x=area_counts.values,
                    y=area_counts.index,
                    orientation='h',
                    title='Iniciativas por √Årea',
                    labels={'x': 'Cantidad', 'y': '√Årea'},
                    color=area_counts.values,
                    color_continuous_scale='viridis'
                )
                st.plotly_chart(fig_area, use_container_width=True)
            
            # Timeline de iniciativas
            st.subheader("üìÖ Timeline de Iniciativas")
            df_timeline = df.copy()
            df_timeline['fecha'] = df_timeline['timestamp'].dt.date
            timeline_data = df_timeline.groupby('fecha').size().reset_index(name='cantidad')
            
            fig_timeline = px.line(
                timeline_data,
                x='fecha',
                y='cantidad',
                title='Evoluci√≥n de Iniciativas Propuestas',
                markers=True,
                line_shape='spline'
            )
            fig_timeline.update_layout(
                xaxis_title="Fecha",
                yaxis_title="Cantidad de Iniciativas",
                hovermode='x unified'
            )
            st.plotly_chart(fig_timeline, use_container_width=True)
            
            # Top iniciativas
            st.subheader("üèÜ Top Iniciativas por Puntuaci√≥n")
            df['puntuacion_global'] = pd.to_numeric(df['puntuacion_global'], errors='coerce')
            df_sorted = df.dropna(subset=['puntuacion_global'])
            top_initiatives = df_sorted.nlargest(5, 'puntuacion_global')[
                ['timestamp', 'nombre_iniciativa', 'descripcion', 'puntuacion_global', 'proponente', 'categoria', 'impacto']
            ]
            
            for idx, row in top_initiatives.iterrows():
                col1, col2, col3 = st.columns([3, 1, 1])
                with col1:
                    st.markdown(f"**{row['nombre_iniciativa']}**")
                    st.caption(f"Por: {row['proponente']} | Categor√≠a: {row['categoria']}")
                with col2:
                    st.metric("Puntuaci√≥n", f"{row['puntuacion_global']:.0f}")
                with col3:
                    impact_class = "high-impact" if row['impacto'] >= 8 else "medium-impact" if row['impacto'] >= 5 else "low-impact"
                    st.markdown(f'<span class="status-badge {impact_class}">Impacto: {row["impacto"]:.0f}</span>', unsafe_allow_html=True)
        
        with tab2:
            st.header("üìã Lista de Iniciativas")
            
            col1, col2 = st.columns([3, 1])
            with col1:
                search_term = st.text_input("üîç Buscar iniciativa", placeholder="Buscar por nombre o descripci√≥n...")
            with col2:
                sort_by = st.selectbox("Ordenar por", ["Puntuaci√≥n", "Fecha", "Impacto", "Esfuerzo"])
            
            if search_term:
                mask = (
                    df['nombre_iniciativa'].str.contains(search_term, case=False, na=False) |
                    df['descripcion'].str.contains(search_term, case=False, na=False)
                )
                df_filtered = df[mask]
            else:
                df_filtered = df
            
            sort_mapping = {
                "Puntuaci√≥n": "puntuacion_global",
                "Fecha": "timestamp",
                "Impacto": "impacto",
                "Esfuerzo": "esfuerzo"
            }
            df_filtered = df_filtered.sort_values(by=sort_mapping[sort_by], ascending=False)
            
            for idx, row in df_filtered.iterrows():
                with st.expander(f"{row['nombre_iniciativa']} - Puntuaci√≥n: {row['puntuacion_global']:.0f}"):
                    col1, col2 = st.columns([2, 1])
                    
                    with col1:
                        st.markdown(f"**Proponente:** {row['proponente']}")
                        st.markdown(f"**√Årea:** {row['area_proceso']}")
                        st.markdown(f"**Categor√≠a:** {row['categoria']}")
                        st.markdown(f"**Fecha:** {row['timestamp'].strftime('%Y-%m-%d')}")
                        
                        st.markdown("**Descripci√≥n:**")
                        st.write(row['descripcion'])
                    
                    with col2:
                        st.markdown("**Evaluaci√≥n:**")
                        col_a, col_b = st.columns(2)
                        with col_a:
                            st.metric("Impacto", f"{row['impacto']:.0f}/10")
                            st.metric("Viabilidad", f"{row['viabilidad_tecnica']:.0f}/10")
                        with col_b:
                            st.metric("Esfuerzo", f"{row['esfuerzo']:.0f}/10")
                            st.metric("Alineaci√≥n", f"{row['alineacion_estrategica']:.0f}/10")
                        
                        st.metric("Tiempo Est.", f"{row['tiempo_implementacion']} meses")
                        
                        cuadrante_color = {
                            "Quick Wins": "üü¢",
                            "Proyectos Estrat√©gicos": "üîµ",
                            "Fill Ins": "üü°",
                            "Dif√≠ciles de Justificar": "üî¥"
                        }
                        st.markdown(f"**Cuadrante:** {cuadrante_color.get(row['cuadrante'], '')} {row['cuadrante']}")
                    
                    tab_ben, tab_risk, tab_rec = st.tabs(["‚úÖ Beneficios", "‚ö†Ô∏è Riesgos", "üí° Recomendaciones"])
                    
                    with tab_ben:
                        if isinstance(row['beneficios'], list):
                            for beneficio in row['beneficios']:
                                st.write(f"‚Ä¢ {beneficio}")
                    
                    with tab_risk:
                        if isinstance(row['riesgos'], list):
                            for riesgo in row['riesgos']:
                                st.write(f"‚Ä¢ {riesgo}")
                    
                    with tab_rec:
                        if isinstance(row['recomendaciones'], list):
                            for rec in row['recomendaciones']:
                                st.write(f"‚Ä¢ {rec}")
                    
                    with st.container():
                        st.divider()
                        st.caption(f"üìß {row['correo']} | üì± {row['telefono']}")
        
        with tab3:
            st.header("üìà Matriz Esfuerzo-Impacto")
            
            fig_matrix = px.scatter(
                df,
                x='esfuerzo',
                y='impacto',
                color='cuadrante',
                size='puntuacion_global',
                hover_data=['nombre_iniciativa', 'proponente', 'categoria'],
                title='Matriz de Priorizaci√≥n: Esfuerzo vs Impacto',
                labels={'esfuerzo': 'Esfuerzo (1-10)', 'impacto': 'Impacto (1-10)'},
                color_discrete_map={
                    "Quick Wins": "#10b981",
                    "Proyectos Estrat√©gicos": "#3b82f6",
                    "Fill Ins": "#f59e0b",
                    "Dif√≠ciles de Justificar": "#ef4444"
                }
            )
            
            fig_matrix.add_hline(y=7, line_dash="dash", line_color="gray", opacity=0.5)
            fig_matrix.add_vline(x=4, line_dash="dash", line_color="gray", opacity=0.5)
            
            fig_matrix.add_annotation(
                x=2, y=8.5,
                text="Quick Wins<br>Alto Impacto<br>Bajo Esfuerzo",
                showarrow=False,
                font=dict(size=12, color="green"),
                bgcolor="rgba(16, 185, 129, 0.1)",
                borderpad=4
            )
            fig_matrix.add_annotation(
                x=7, y=8.5,
                text="Proyectos<br>Estrat√©gicos<br>Alto Impacto<br>Alto Esfuerzo",
                showarrow=False,
                font=dict(size=12, color="blue"),
                bgcolor="rgba(59, 130, 246, 0.1)",
                borderpad=4
            )
            fig_matrix.add_annotation(
                x=2, y=3.5,
                text="Fill Ins<br>Bajo Impacto<br>Bajo Esfuerzo",
                showarrow=False,
                font=dict(size=12, color="orange"),
                bgcolor="rgba(245, 158, 11, 0.1)",
                borderpad=4
            )
            fig_matrix.add_annotation(
                x=7, y=3.5,
                text="Dif√≠ciles de<br>Justificar<br>Bajo Impacto<br>Alto Esfuerzo",
                showarrow=False,
                font=dict(size=12, color="red"),
                bgcolor="rgba(239, 68, 68, 0.1)",
                borderpad=4
            )
            
            fig_matrix.update_layout(
                xaxis=dict(range=[0, 11], dtick=1),
                yaxis=dict(range=[0, 11], dtick=1),
                height=600,
                hovermode='closest'
            )
            
            st.plotly_chart(fig_matrix, use_container_width=True)
            
            st.subheader("üìä Resumen por Cuadrante")
            
            col1, col2, col3, col4 = st.columns(4)
            
            cuadrantes_info = {
                "Quick Wins": {"emoji": "üü¢", "desc": "Implementar inmediatamente"},
                "Proyectos Estrat√©gicos": {"emoji": "üîµ", "desc": "Planificar cuidadosamente"},
                "Fill Ins": {"emoji": "üü°", "desc": "Implementar si hay recursos"},
                "Dif√≠ciles de Justificar": {"emoji": "üî¥", "desc": "Reconsiderar o rechazar"}
            }
            
            for col, (cuadrante, info) in zip([col1, col2, col3, col4], cuadrantes_info.items()):
                with col:
                    df_cuadrante = df[df['cuadrante'] == cuadrante]
                    st.markdown(f"### {info['emoji']} {cuadrante}")
                    st.metric("Cantidad", len(df_cuadrante))
                    st.caption(info['desc'])
                    
                    if len(df_cuadrante) > 0:
                        st.markdown("**Top 3:**")
                        for idx, row in df_cuadrante.nlargest(3, 'puntuacion_global').iterrows():
                            st.write(f"‚Ä¢ {row['nombre_iniciativa'][:30]}...")
        
        with tab4:
            st.header("üìë Generaci√≥n de Informes")
            
            tipo_informe = st.selectbox(
                "Selecciona el tipo de informe",
                ["Resumen Ejecutivo", "An√°lisis por Categor√≠as", "Reporte de Viabilidad", "Informe Completo"]
            )
            
            if st.button("üìÑ Generar Informe", type="primary"):
                with st.spinner("Generando informe..."):
                    if tipo_informe == "Resumen Ejecutivo":
                        st.markdown("## üìä Resumen Ejecutivo de Iniciativas de Innovaci√≥n")
                        st.markdown(f"**Fecha:** {datetime.now().strftime('%Y-%m-%d')}")
                        st.markdown(f"**Total de Iniciativas Analizadas:** {len(df)}")
                        
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("Puntuaci√≥n Promedio", f"{df['puntuacion_global'].mean():.1f}/100")
                        with col2:
                            st.metric("Impacto Promedio", f"{df['impacto'].mean():.1f}/10")
                        with col3:
                            st.metric("Tiempo Promedio Implementaci√≥n", f"{df['tiempo_implementacion'].mean():.1f} meses")
                        
                        st.markdown("### üèÜ Top 5 Iniciativas Recomendadas")
                        top_5 = df.nlargest(5, 'puntuacion_global')
                        for idx, row in top_5.iterrows():
                            st.markdown(f"**{idx+1}. {row['nombre_iniciativa']}**")
                            st.write(f"   - Proponente: {row['proponente']}")
                            st.write(f"   - Puntuaci√≥n: {row['puntuacion_global']:.0f}/100")
                            st.write(f"   - Cuadrante: {row['cuadrante']}")
                        
                        st.markdown("### üìà Distribuci√≥n por Categor√≠as")
                        cat_dist = df['categoria'].value_counts()
                        for cat, count in cat_dist.items():
                            st.write(f"- **{cat}:** {count} iniciativas ({count/len(df)*100:.1f}%)")
                        
                        st.markdown("### üí° Recomendaciones Generales")
                        quick_wins_count = len(df[df['cuadrante'] == 'Quick Wins'])
                        st.write(f"1. Se identificaron **{quick_wins_count} Quick Wins** que deben ser implementados de inmediato.")
                        st.write("2. Las iniciativas de **Tecnolog√≠a** muestran el mayor potencial de impacto.")
                        st.write("3. Se recomienda establecer un comit√© de seguimiento para las iniciativas estrat√©gicas.")
                    
                    elif tipo_informe == "An√°lisis por Categor√≠as":
                        st.markdown("## üìä An√°lisis Detallado por Categor√≠as")
                        
                        for categoria in df['categoria'].unique():
                            df_cat = df[df['categoria'] == categoria]
                            
                            st.markdown(f"### {categoria}")
                            
                            col1, col2, col3, col4 = st.columns(4)
                            with col1:
                                st.metric("Iniciativas", len(df_cat))
                            with col2:
                                st.metric("Puntuaci√≥n Promedio", f"{df_cat['puntuacion_global'].mean():.1f}")
                            with col3:
                                st.metric("Impacto Promedio", f"{df_cat['impacto'].mean():.1f}")
                            with col4:
                                st.metric("Esfuerzo Promedio", f"{df_cat['esfuerzo'].mean():.1f}")
                            
                            st.markdown("**Top 3 Iniciativas:**")
                            for idx, row in df_cat.nlargest(3, 'puntuacion_global').iterrows():
                                st.write(f"‚Ä¢ {row['nombre_iniciativa']} (Puntuaci√≥n: {row['puntuacion_global']:.0f})")
                            
                            st.divider()
                    
                    elif tipo_informe == "Reporte de Viabilidad":
                        st.markdown("## üéØ Reporte de Viabilidad T√©cnica")
                        
                        st.markdown("### ‚úÖ Iniciativas de Alta Viabilidad (‚â•8/10)")
                        high_viability = df[df['viabilidad_tecnica'] >= 8].sort_values('viabilidad_tecnica', ascending=False)
                        
                        for idx, row in high_viability.iterrows():
                            with st.expander(f"{row['nombre_iniciativa']} - Viabilidad: {row['viabilidad_tecnica']:.0f}/10"):
                                st.write(f"**Descripci√≥n:** {row['descripcion']}")
                                st.write(f"**Tiempo estimado:** {row['tiempo_implementacion']} meses")
                                st.write(f"**Impacto esperado:** {row['impacto']:.0f}/10")
                        
                        st.markdown("### ‚ö†Ô∏è Iniciativas que Requieren An√°lisis Adicional (5-7/10)")
                        medium_viability = df[(df['viabilidad_tecnica'] >= 5) & (df['viabilidad_tecnica'] < 8)]
                        
                        if len(medium_viability) > 0:
                            st.write(f"Se identificaron {len(medium_viability)} iniciativas que requieren evaluaci√≥n adicional:")
                            for idx, row in medium_viability.iterrows():
                                st.write(f"‚Ä¢ {row['nombre_iniciativa']} - Viabilidad: {row['viabilidad_tecnica']:.0f}/10")
                    
                    else:  # Informe Completo
                        st.markdown("## üìã Informe Completo de Iniciativas de Innovaci√≥n")
                        st.markdown(f"**Generado el:** {datetime.now().strftime('%Y-%m-%d %H:%M')}")
                        
                        csv = df.to_csv(index=False).encode('utf-8')
                        st.download_button(
                            label="üì• Descargar datos completos (CSV)",
                            data=csv,
                            file_name=f"iniciativas_innovacion_{datetime.now().strftime('%Y%m%d')}.csv",
                            mime="text/csv"
                        )
                        
                        st.dataframe(
                            df[[
                                'nombre_iniciativa', 'proponente', 'categoria', 
                                'puntuacion_global', 'impacto', 'esfuerzo', 
                                'viabilidad_tecnica', 'cuadrante'
                            ]].sort_values('puntuacion_global', ascending=False),
                            use_container_width=True
                        )
        
        with tab5:
            st.header("üîç An√°lisis Detallado de Iniciativa")
            
            iniciativa_seleccionada = st.selectbox(
                "Selecciona una iniciativa para an√°lisis detallado",
                df['nombre_iniciativa'].tolist()
            )
            
            if iniciativa_seleccionada:
                row = df[df['nombre_iniciativa'] == iniciativa_seleccionada].iloc[0]
                
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.markdown(f"### {row['nombre_iniciativa']}")
                    st.write(f"**Proponente:** {row['proponente']}")
                    st.write(f"**√Årea:** {row['area_proceso']}")
                    st.write(f"**Fecha de propuesta:** {row['timestamp'].strftime('%Y-%m-%d')}")
                    
                    st.markdown("**Descripci√≥n completa:**")
                    st.info(row['descripcion'])
                
                with col2:
                    categories = ['Impacto', 'Viabilidad', 'Alineaci√≥n', 'Innovaci√≥n']
                    values = [
                        row['impacto'],
                        row['viabilidad_tecnica'],
                        row['alineacion_estrategica'],
                        row['puntuacion_global']/10
                    ]
                    
                    fig_radar = go.Figure(data=go.Scatterpolar(
                        r=values,
                        theta=categories,
                        fill='toself',
                        name='Evaluaci√≥n'
                    ))
                    
                    fig_radar.update_layout(
                        polar=dict(
                            radialaxis=dict(
                                visible=True,
                                range=[0, 10]
                            )),
                        showlegend=False,
                        title="Evaluaci√≥n Multidimensional"
                    )
                    
                    st.plotly_chart(fig_radar, use_container_width=True)
                
                st.markdown("### üìä M√©tricas de Evaluaci√≥n")
                
                col1, col2, col3, col4, col5 = st.columns(5)
                
                with col1:
                    st.metric("Puntuaci√≥n Global", f"{row['puntuacion_global']:.0f}/100")
                with col2:
                    st.metric("Impacto", f"{row['impacto']:.0f}/10")
                with col3:
                    st.metric("Esfuerzo", f"{row['esfuerzo']:.0f}/10")
                with col4:
                    st.metric("Viabilidad", f"{row['viabilidad_tecnica']:.0f}/10")
                with col5:
                    st.metric("Tiempo", f"{row['tiempo_implementacion']} meses")
                
                st.markdown("### üìù An√°lisis Detallado")
                
                tab1, tab2, tab3, tab4 = st.tabs(["Beneficios", "Riesgos", "Recomendaciones", "Plan de Acci√≥n"])
                
                with tab1:
                    st.markdown("#### ‚úÖ Beneficios Esperados")
                    if isinstance(row['beneficios'], list):
                        for i, beneficio in enumerate(row['beneficios'], 1):
                            st.success(f"{i}. {beneficio}")
                
                with tab2:
                    st.markdown("#### ‚ö†Ô∏è Riesgos Identificados")
                    if isinstance(row['riesgos'], list):
                        for i, riesgo in enumerate(row['riesgos'], 1):
                            st.warning(f"{i}. {riesgo}")
                
                with tab3:
                    st.markdown("#### üí° Recomendaciones")
                    if isinstance(row['recomendaciones'], list):
                        for i, rec in enumerate(row['recomendaciones'], 1):
                            st.info(f"{i}. {rec}")
                
                with tab4:
                    st.markdown("#### üìÖ Plan de Acci√≥n Sugerido")
                    
                    meses = int(row['tiempo_implementacion'])
                    fases = []
                    
                    if meses <= 3:
                        fases = [
                            ("Fase 1: Planificaci√≥n", "Mes 1", "Definir alcance y recursos"),
                            ("Fase 2: Implementaci√≥n", "Mes 2", "Desarrollo y pruebas"),
                            ("Fase 3: Lanzamiento", "Mes 3", "Despliegue y monitoreo")
                        ]
                    elif meses <= 6:
                        fases = [
                            ("Fase 1: An√°lisis", "Mes 1-2", "Estudio de viabilidad detallado"),
                            ("Fase 2: Dise√±o", "Mes 2-3", "Dise√±o de la soluci√≥n"),
                            ("Fase 3: Desarrollo", "Mes 3-5", "Implementaci√≥n"),
                            ("Fase 4: Despliegue", "Mes 5-6", "Lanzamiento y seguimiento")
                        ]
                    else:
                        fases = [
                            ("Fase 1: Investigaci√≥n", "Mes 1-2", "An√°lisis profundo"),
                            ("Fase 2: Planificaci√≥n", "Mes 3-4", "Plan detallado"),
                            ("Fase 3: Desarrollo", f"Mes 5-{meses-2}", "Implementaci√≥n iterativa"),
                            ("Fase 4: Validaci√≥n", f"Mes {meses-1}", "Pruebas y ajustes"),
                            ("Fase 5: Lanzamiento", f"Mes {meses}", "Despliegue final")
                        ]
                    
                    for fase, tiempo, descripcion in fases:
                        st.write(f"**{fase}**")
                        st.write(f"üìÖ {tiempo}: {descripcion}")
                        st.divider()
                    
                    st.markdown("#### üí∞ Recursos Estimados")
                    if row['impacto'] >= 8:
                        st.write("‚Ä¢ **Prioridad:** Alta - Asignar recursos dedicados")
                    elif row['impacto'] >= 5:
                        st.write("‚Ä¢ **Prioridad:** Media - Recursos compartidos")
                    else:
                        st.write("‚Ä¢ **Prioridad:** Baja - Recursos m√≠nimos")
                    
                    st.write(f"‚Ä¢ **Equipo sugerido:** {2 if row['esfuerzo'] < 5 else 3 if row['esfuerzo'] < 8 else 5} personas")
                    st.write(f"‚Ä¢ **√Årea l√≠der:** {row['area_proceso']}")
                
                st.markdown("### üìû Informaci√≥n de Contacto")
                col1, col2 = st.columns(2)
                with col1:
                    st.write(f"üìß **Email:** {row['correo']}")
                with col2:
                    st.write(f"üì± **Tel√©fono:** {row['telefono']}")
    
    else:
        st.info("üëã ¬°Bienvenido al Sistema de An√°lisis de Iniciativas de Innovaci√≥n!")
        st.markdown("""
        Para comenzar:
        1. Ingresa la URL de tu Google Sheets en la barra lateral
        2. Haz clic en **Cargar/Actualizar Datos**
        3. Los datos se analizar√°n autom√°ticamente si es necesario
        
        El sistema analizar√° autom√°ticamente cada iniciativa y proporcionar√°:
        - üìä Dashboard con m√©tricas clave
        - üìà Matriz de priorizaci√≥n Esfuerzo-Impacto
        - üìã Vista detallada de cada iniciativa
        - üìë Generaci√≥n de informes personalizados
        - üîç An√°lisis profundo con recomendaciones
        """)
        
        with st.expander("üèóÔ∏è Arquitectura del Sistema"):
            st.markdown("""
            **Componentes principales:**
            - **Google Sheets API**: Conexi√≥n en tiempo real con el formulario
            - **OpenAI GPT-4**: An√°lisis inteligente de iniciativas
            - **Streamlit**: Interfaz interactiva y visualizaciones
            - **Plotly**: Gr√°ficos din√°micos e interactivos
            
            **Flujo de datos:**
            1. Las respuestas del Google Forms se almacenan en Sheets
            2. La aplicaci√≥n lee los datos mediante la API
            3. Se verifica si las iniciativas ya fueron analizadas
            4. Las nuevas iniciativas se analizan con IA y se guardan
            5. Los resultados se visualizan en dashboards interactivos
            """)

if __name__ == "__main__":
    main()
